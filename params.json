{"name":"Twilio-dart","tagline":"A Dart helper library for Twilio's wicked API","body":"[![Build Status](https://drone.io/github.com/mplacona/twilio-dart/status.png)](https://drone.io/github.com/mplacona/twilio-dart/latest)\r\n\r\n# Twilio Wrapper for Dart\r\n---\r\nA Future-based wrapper for the [Twilio API](https://www.twilio.com/docs/quickstart/). With this wrapper you can get yourself on the wonderful world of communication via [SMS](https://www.twilio.com/sms/api) and [Voice](https://www.twilio.com/voice/api) (WIP).\r\n\r\n## Dependencies\r\n* [http](https://pub.dartlang.org/packages/http)\r\n\r\n## [Getting Started](id:getting_started)\r\n* Add a dependency to `twilio_dart` to your pubspec.yaml\r\n* Run `pub get`\r\n* Obtain a key and an authentication code on the [dashboard](https://www.twilio.com/user/account) of the Twilio website. The account is limited but free.\r\n\r\n![Twilio user account dashboard](docs/images/twilio_user_account_dashboard.png \"Twilio user account dashboard\")\r\n\r\n* You can now create a new Twilio object with your account details as such:\r\n\r\n```dart\r\nimport 'package:twilio_dart/twilio.dart';\r\n\r\nvar key = \"your_twilio_key\";\r\nvar authToken = \"your_auth_token\";\r\nvar version = \"2010-04-01\";\r\n//create a new twilio object\r\nTwilio twilio = new Twilio(key, authToken, version);\r\n```\r\n\r\n> And this will allow you access o any of the currently available methods on this wrapper (more on this later)\r\n\r\n### [Sending an SMS message](id:sending)\r\n* Create a new Twilio object as described in [Getting Started](#getting_started).\r\n* Replace the sample values with the ones obtained when you created your Twilio account (also described above in [Getting Started](#getting_started)).\r\n* Define a `from`, a `to` and a `body`. __Remember you can only send SMS's from the numbers obtained from your Twilio account__.\r\n\r\n```dart\r\nvar from = \"your_twilio_phone\";\r\nvar to = \"your_mobile_number\";\r\nvar body = \"Look ma! Dart can now send SMS's in under 15 lines\";\r\n```\r\n* Send the message away!\r\n```dart\r\ntwilio.sendSMS(from, to, body).then((response) => print(\"Your message has been sent!\")).catchError((error) => print(error));\r\n```\r\n> You can also turn your SMS message into an [MMS](http://en.wikipedia.org/wiki/Multimedia_Messaging_Service) message by including an attachment with it. The API accepts a 4th argument in the form of a URL pointing to the image you would like to send.\r\n\r\n### [Reading a message](id:reading)\r\nAny messages sent via Twilio are stored, so they can be later on retrieved. But most importantly, your account can also receive messages, and you need a way to retrieve it don't you?\r\n\r\nThe same Twilio object you created in Getting Started](#getting_started) can now be used to retrieve any messages by its Twilio ID.\r\n\r\n```dart\r\ntwilio.readSMS(_messageSid);\r\n```\r\n\r\n### [Listing all messages](id:listing)\r\nYou're gonna wanna show a list of the messages you've received, so you can drill down to each individual message. To do so... you guessed right, you will again utilise the Twilio object you created earlier as such:\r\n\r\n```dart\r\ntwilio.readSMSList()\r\n```\r\n\r\nThis time, unlike with [Reading a message](#reading), you won't be passing any message ID's, as we want to list every single message in the account.\r\n\r\n#### To be implemented\r\nOptional parameters for:\r\nFrom\r\nTo\r\nDateSent\r\n\r\n## But what about the browser?\r\nThe browser implementation is still highly experimental, and although tests have proven it works, I'm still not 100% happy with the way it's been implemented.\r\n\r\nIt can be used via the `twilio_browser` option. Just import\r\n\r\n```dart\r\nimport 'package:twilio_dart/twilio_browser.dart';\r\n```\r\n\r\nInstead of your normal\r\n\r\n```dart\r\nimport 'package:twilio_dart/twilio.dart';\r\n```\r\n\r\n__Yes, this needs work :-D __\r\n\r\n## Bugs?\r\nCreate a new issue tagged `bug`\r\n\r\n## Collaborate\r\nCollaboration is the key to every successful library, and this one is no different. I would love to see my code improved, and new features added to the library. \r\n\r\nJust __fork__ this repository, and send me a __pull request__ when you're done. I'm using [git flow](https://github.com/nvie/gitflow) to manage new features and bugs, and would highly recommend you used the same thing. I will then be happy to turn your pull request into a release :-).\r\n\r\nThe process is as follows after you've created your fork:\r\n\r\n```\r\ngit clone git@github.com:<username>/twilio-dart.git\r\ncd twilio-dart\r\ngit branch master origin/master\r\ngit flow init -d\r\ngit flow feature start <your feature>\r\n```\r\n\r\nDo your magic and commit as often as you like. Once done run:\r\n\r\n```\r\ngit flow feature publish <your feature>\r\n```\r\n\r\nWhen that's completed, open a pull request to your feature branch on GitHub.\r\n\r\n[This cheatsheet](http://danielkummer.github.io/git-flow-cheatsheet/) will be useful if you want to do some other cool things.\r\n\r\n## Test\r\nI always try to add as much cover as I can, and am especially careful to make sure I always play nice with third party API's. If code is written correctly, you can easily mock functionality without having to actually hit the API's directly.\r\n\r\nThis obviously saves not only on the number of requests you will make every time you run the test suite, but in any limitations that might arise from running unit tests over and over again hitting the API on a trial account.\r\n\r\nIt also decouples me from the web, which means I can code on the move (I commute to work), and still run my entire suite without internet connectivity. I have used the following libraries for my unit tests:\r\n\r\n* [mock](https://pub.dartlang.org/packages/mock)\r\n* [unittest](https://pub.dartlang.org/packages/unittest)\r\n\r\n## Roadmap\r\nLike I said before, Twilio's API is very big, and the ability to send texts is just the tip of the iceberg. The following are the next things I would like to implement in the future when time permits:\r\n\r\n* Calls\r\n\t* Make a call\r\n\t* View call\r\n\t* View call list\r\n\t* Modify a Live Call\r\n\t* View Call Recording List\r\n\t* View Call Notification List\r\n* Recordings\r\n\t* View Recording\r\n\t* View Recording List\r\n\t* View Transcription List for Recording\r\n\t* Delete Recording\r\n* Usage Records\r\n\t* View Usage Record List\r\n\t* View Usage Record Subresource\r\n* Conferences\r\n\t* View Conference\r\n\t* View Conference List\r\n\t* View Participant for Conference\r\n\t* View Participant List for Conference\r\n\t* Mute Participant\r\n\t* Delete Participant\r\n\r\nAgain, not a full list, as there is much more that can be done, however, the list above are my personal preferences ;-)\r\n\r\n## Disclaimer\r\nI am in no way affiliated to Twilio, other than having a trial account with them, like you probably also do by now. \r\n\r\nThis library is also not endorsed or officially supported by Twilio, though I'm pretty sure they will be happy to help if you have questions about the API itself.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}